"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addEndian = addEndian;
exports.readRecord = readRecord;
exports.getArrayBuffer = getArrayBuffer;
exports.calculateCRC = calculateCRC;

var _sdk = require("./sdk");

var _messages = require("./messages");

function addEndian(littleEndian, bytes) {
  var result = 0;
  if (!littleEndian) bytes.reverse();

  for (var i = 0; i < bytes.length; i++) {
    result += bytes[i] << (i << 3) >>> 0;
  }

  return result;
}

function readData(blob, fDef, startIndex, options) {
  if (fDef.endianAbility === true) {
    var temp = [];

    for (var i = 0; i < fDef.size; i++) {
      temp.push(blob[startIndex + i]);
    }

    var _ref = new Uint8Array(temp),
        buffer = _ref.buffer;

    var dataView = new DataView(buffer);

    try {
      switch (fDef.type) {
        case 'sint16':
          return dataView.getInt16(0, fDef.littleEndian);

        case 'uint16':
        case 'uint16z':
          return dataView.getUint16(0, fDef.littleEndian);

        case 'sint32':
          return dataView.getInt32(0, fDef.littleEndian);

        case 'uint32':
        case 'uint32z':
          return dataView.getUint32(0, fDef.littleEndian);

        case 'float32':
          return dataView.getFloat32(0, fDef.littleEndian);

        case 'float64':
          return dataView.getFloat64(0, fDef.littleEndian);

        case 'uint16_array':
          {
            var array = [];

            for (var _i = 0; _i < fDef.size; _i += 2) {
              array.push(dataView.getUint16(_i, fDef.littleEndian));
            }

            return array;
          }

        default:
          throw Error('No type');
      }
    } catch (e) {
      if (!options.force) {
        throw e;
      }
    }

    return addEndian(fDef.littleEndian, temp);
  }

  if (fDef.type === 'string') {
    var _temp = [];

    for (var _i2 = 0; _i2 < fDef.size; _i2++) {
      if (blob[startIndex + _i2]) {
        _temp.push(blob[startIndex + _i2]);
      }
    }

    return Buffer.from(_temp).toString('utf-8');
  }

  if (fDef.type === 'byte_array') {
    var _temp2 = [];

    for (var _i3 = 0; _i3 < fDef.size; _i3++) {
      _temp2.push(blob[startIndex + _i3]);
    }

    return _temp2;
  }

  return blob[startIndex];
}

function formatByType(data, type, scale, offset) {
  var off = offset ? offset : 0;

  switch (type) {
    case 'date_time':
    case 'local_date_time':
      return new Date(data * 1000 + 631065600000);

    case 'sint32':
      return data * _sdk.FITSDK.scConst;

    case 'sint16':
    case 'uint32':
    case 'uint16':
      return scale ? data / scale + off : data;

    case 'uint16_array':
      var data_array = data;
      return data.map(function (dataItem) {
        if (scale) {
          return dataItem / scale + off;
        }

        return dataItem;
      });

    default:
      {
        if (!_sdk.FITSDK.types.hasOwnProperty(type)) {
          return data;
        }

        var types = _sdk.FITSDK.types[type]; // Quick check for a mask

        var values = [];
        Object.keys(types).forEach(function (key, _) {
          values.push(types[key]);
        });

        if (values.indexOf('mask') === -1) {
          return types[data];
        }

        var dataItem = {};
        Object.keys(types).forEach(function (key, _) {
          var item = types[key];

          if (item === 'mask') {
            dataItem['value'] = data & parseInt(key);
          } else {
            dataItem[item] = !!((data & parseInt(key)) >> 7); // Not sure if we need the >> 7 and casting to boolean but from all
            // the masked props of fields so far this seems to be the case
          }
        });
        return dataItem;
      }
  }
}

function isInvalidValue(data, type) {
  switch (type) {
    case 'enum':
      return data === 0xFF;

    case 'sint8':
      return data === 0x7F;

    case 'uint8':
      return data === 0xFF;

    case 'sint16':
      return data === 0x7FFF;

    case 'uint16':
      return data === 0xFFFF;

    case 'sint32':
      return data === 0x7FFFFFFF;

    case 'uint32':
      return data === 0xFFFFFFFF;

    case 'string':
      return data === 0x00;

    case 'float32':
      return data === 0xFFFFFFFF;

    case 'float64':
      return data === 0xFFFFFFFFFFFFFFFF;

    case 'uint8z':
      return data === 0x00;

    case 'uint16z':
      return data === 0x0000;

    case 'uint32z':
      return data === 0x000000;

    case 'byte':
      return data === 0xFF;

    case 'sint64':
      return data === 0x7FFFFFFFFFFFFFFF;

    case 'uint64':
      return data === 0xFFFFFFFFFFFFFFFF;

    case 'uint64z':
      return data === 0x0000000000000000;

    default:
      return false;
  }
}

function convertTo(data, unitsList, speedUnit) {
  var unitObj = _sdk.FITSDK.options[unitsList][speedUnit];
  return unitObj ? data * unitObj.multiplier + unitObj.offset : data;
}

function applyOptions(data, field, options) {
  switch (field) {
    case 'speed':
    case 'enhanced_speed':
    case 'vertical_speed':
    case 'avg_speed':
    case 'max_speed':
    case 'speed_1s':
    case 'ball_speed':
    case 'enhanced_avg_speed':
    case 'enhanced_max_speed':
    case 'avg_pos_vertical_speed':
    case 'max_pos_vertical_speed':
    case 'avg_neg_vertical_speed':
    case 'max_neg_vertical_speed':
      // !!Â because options have already been checked
      return convertTo(data, 'speedUnits', options.speedUnit);

    case 'distance':
    case 'total_distance':
    case 'enhanced_avg_altitude':
    case 'enhanced_min_altitude':
    case 'enhanced_max_altitude':
    case 'enhanced_altitude':
    case 'height':
    case 'odometer':
    case 'avg_stroke_distance':
    case 'min_altitude':
    case 'avg_altitude':
    case 'max_altitude':
    case 'total_ascent':
    case 'total_descent':
    case 'altitude':
    case 'cycle_length':
    case 'auto_wheelsize':
    case 'custom_wheelsize':
    case 'gps_accuracy':
      return convertTo(data, 'lengthUnits', options.lengthUnit);

    case 'temperature':
    case 'avg_temperature':
    case 'max_temperature':
      return convertTo(data, 'temperatureUnits', options.temperatureUnit);

    default:
      return data;
  }
}

function readRecord(blob, messageTypes, developerFields, startIndex, options, startDate, pausedTime) {
  var recordHeader = blob[startIndex];
  var localMessageType = recordHeader & 15;

  if ((recordHeader & 64) === 64) {
    // is definition message
    // startIndex + 1 is reserved
    var hasDeveloperData = (recordHeader & 32) === 32;
    var lEnd = blob[startIndex + 2] === 0;
    var numberOfFields = blob[startIndex + 5];
    var numberOfDeveloperDataFields = hasDeveloperData ? blob[startIndex + 5 + numberOfFields * 3 + 1] : 0;
    var mTypeDef = {
      littleEndian: lEnd,
      globalMessageNumber: addEndian(lEnd, [blob[startIndex + 3], blob[startIndex + 4]]),
      numberOfFields: numberOfFields + numberOfDeveloperDataFields,
      fieldDefs: []
    };

    var _message = (0, _messages.getFitMessage)(mTypeDef.globalMessageNumber);

    for (var i = 0; i < numberOfFields; i++) {
      var fDefIndex = startIndex + 6 + i * 3;
      var baseType = blob[fDefIndex + 2];

      var _message$getAttribute = _message.getAttributes(blob[fDefIndex]),
          field = _message$getAttribute.field,
          type = _message$getAttribute.type;

      var fDef = {
        type: type,
        fDefNo: blob[fDefIndex],
        size: blob[fDefIndex + 1],
        endianAbility: (baseType & 128) === 128,
        littleEndian: lEnd,
        baseTypeNo: baseType & 15,
        name: field,
        dataType: (0, _messages.getFitMessageBaseType)(baseType & 15)
      };
      mTypeDef.fieldDefs.push(fDef);
    }

    for (var _i4 = 0; _i4 < numberOfDeveloperDataFields; _i4++) {
      // If we fail to parse then try catch
      try {
        var _fDefIndex = startIndex + 6 + numberOfFields * 3 + 1 + _i4 * 3;

        var fieldNum = blob[_fDefIndex];
        var size = blob[_fDefIndex + 1];
        var devDataIndex = blob[_fDefIndex + 2];
        var devDef = developerFields[devDataIndex][fieldNum];
        var _baseType = devDef.fit_base_type_id;
        var _fDef = {
          type: _sdk.FITSDK.types.fit_base_type[_baseType],
          size: size,
          fDefNo: fieldNum,
          endianAbility: (_baseType & 128) === 128,
          littleEndian: lEnd,
          baseTypeNo: _baseType & 15,
          name: devDef.field_name,
          dataType: (0, _messages.getFitMessageBaseType)(_baseType & 15),
          scale: devDef.scale || 1,
          offset: devDef.offset || 0,
          developerDataIndex: devDataIndex,
          isDeveloperField: true
        };
        mTypeDef.fieldDefs.push(_fDef);
      } catch (e) {
        if (options.force) {
          continue;
        }

        throw e;
      }
    }

    messageTypes[localMessageType] = mTypeDef;
    var nextIndex = startIndex + 6 + mTypeDef.numberOfFields * 3;
    var nextIndexWithDeveloperData = nextIndex + 1;
    return {
      messageType: 'definition',
      nextIndex: hasDeveloperData ? nextIndexWithDeveloperData : nextIndex
    };
  }

  var messageType = messageTypes[localMessageType] || messageTypes[0]; // TODO: handle compressed header ((recordHeader & 128) == 128)
  // uncompressed header

  var messageSize = 0;
  var readDataFromIndex = startIndex + 1;
  var fields = {};
  var message = (0, _messages.getFitMessage)(messageType.globalMessageNumber);

  for (var _i5 = 0; _i5 < messageType.fieldDefs.length; _i5++) {
    var _fDef2 = messageType.fieldDefs[_i5];
    var data = readData(blob, _fDef2, readDataFromIndex, options);

    if (!isInvalidValue(data, _fDef2.type)) {
      if (_fDef2.isDeveloperField && _fDef2.name) {
        var field = _fDef2.name;
        var type = _fDef2.type,
            scale = _fDef2.scale,
            offset = _fDef2.offset;
        fields[_fDef2.name] = applyOptions(formatByType(data, type, scale, offset), field, options);
      } else {
        var _message$getAttribute2 = message.getAttributes(_fDef2.fDefNo),
            _field = _message$getAttribute2.field,
            _type = _message$getAttribute2.type,
            _scale = _message$getAttribute2.scale,
            _offset = _message$getAttribute2.offset;

        if (_field !== 'unknown' && _field !== '' && _field !== undefined) {
          fields[_field] = applyOptions(formatByType(data, _type, _scale, _offset), _field, options);
        }
      }

      if (message.name === 'record' && options.elapsedRecordField) {
        fields.elapsed_time = (fields.timestamp - startDate) / 1000;
        fields.timer_time = fields.elapsed_time - pausedTime;
      }
    }

    readDataFromIndex += _fDef2.size;
    messageSize += _fDef2.size;
  }

  if (message.name === 'field_description') {
    developerFields[fields.developer_data_index] = developerFields[fields.developer_data_index] || [];
    developerFields[fields.developer_data_index][fields.field_definition_number] = fields;
  }

  var result = {
    messageType: message.name,
    nextIndex: startIndex + messageSize + 1,
    message: fields
  };
  return result;
}

function getArrayBuffer(buffer) {
  if (buffer instanceof ArrayBuffer) {
    return buffer;
  }

  var ab = new ArrayBuffer(buffer.length);
  var view = new Uint8Array(ab);

  for (var i = 0; i < buffer.length; ++i) {
    view[i] = buffer[i];
  }

  return ab;
}

function calculateCRC(blob, start, end) {
  var crcTable = [0x0000, 0xCC01, 0xD801, 0x1400, 0xF001, 0x3C00, 0x2800, 0xE401, 0xA001, 0x6C00, 0x7800, 0xB401, 0x5000, 0x9C01, 0x8801, 0x4400];
  var crc = 0;

  for (var i = start; i < end; i++) {
    var _byte = blob[i];
    var tmp = crcTable[crc & 0xF];
    crc = crc >> 4 & 0x0FFF;
    crc = crc ^ tmp ^ crcTable[_byte & 0xF];
    tmp = crcTable[crc & 0xF];
    crc = crc >> 4 & 0x0FFF;
    crc = crc ^ tmp ^ crcTable[_byte >> 4 & 0xF];
  }

  return crc;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9iaW5hcnkudHMiXSwibmFtZXMiOlsiYWRkRW5kaWFuIiwibGl0dGxlRW5kaWFuIiwiYnl0ZXMiLCJyZXN1bHQiLCJyZXZlcnNlIiwiaSIsImxlbmd0aCIsInJlYWREYXRhIiwiYmxvYiIsImZEZWYiLCJzdGFydEluZGV4Iiwib3B0aW9ucyIsImVuZGlhbkFiaWxpdHkiLCJ0ZW1wIiwic2l6ZSIsInB1c2giLCJVaW50OEFycmF5IiwiYnVmZmVyIiwiZGF0YVZpZXciLCJEYXRhVmlldyIsInR5cGUiLCJnZXRJbnQxNiIsImdldFVpbnQxNiIsImdldEludDMyIiwiZ2V0VWludDMyIiwiZ2V0RmxvYXQzMiIsImdldEZsb2F0NjQiLCJhcnJheSIsIkVycm9yIiwiZSIsImZvcmNlIiwiQnVmZmVyIiwiZnJvbSIsInRvU3RyaW5nIiwiZm9ybWF0QnlUeXBlIiwiZGF0YSIsInNjYWxlIiwib2Zmc2V0Iiwib2ZmIiwiRGF0ZSIsIkZJVFNESyIsInNjQ29uc3QiLCJkYXRhX2FycmF5IiwibWFwIiwiZGF0YUl0ZW0iLCJ0eXBlcyIsImhhc093blByb3BlcnR5IiwidmFsdWVzIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJfIiwiaW5kZXhPZiIsIml0ZW0iLCJwYXJzZUludCIsImlzSW52YWxpZFZhbHVlIiwiY29udmVydFRvIiwidW5pdHNMaXN0Iiwic3BlZWRVbml0IiwidW5pdE9iaiIsIm11bHRpcGxpZXIiLCJhcHBseU9wdGlvbnMiLCJmaWVsZCIsImxlbmd0aFVuaXQiLCJ0ZW1wZXJhdHVyZVVuaXQiLCJyZWFkUmVjb3JkIiwibWVzc2FnZVR5cGVzIiwiZGV2ZWxvcGVyRmllbGRzIiwic3RhcnREYXRlIiwicGF1c2VkVGltZSIsInJlY29yZEhlYWRlciIsImxvY2FsTWVzc2FnZVR5cGUiLCJoYXNEZXZlbG9wZXJEYXRhIiwibEVuZCIsIm51bWJlck9mRmllbGRzIiwibnVtYmVyT2ZEZXZlbG9wZXJEYXRhRmllbGRzIiwibVR5cGVEZWYiLCJnbG9iYWxNZXNzYWdlTnVtYmVyIiwiZmllbGREZWZzIiwibWVzc2FnZSIsImZEZWZJbmRleCIsImJhc2VUeXBlIiwiZ2V0QXR0cmlidXRlcyIsImZEZWZObyIsImJhc2VUeXBlTm8iLCJuYW1lIiwiZGF0YVR5cGUiLCJmaWVsZE51bSIsImRldkRhdGFJbmRleCIsImRldkRlZiIsImZpdF9iYXNlX3R5cGVfaWQiLCJmaXRfYmFzZV90eXBlIiwiZmllbGRfbmFtZSIsImRldmVsb3BlckRhdGFJbmRleCIsImlzRGV2ZWxvcGVyRmllbGQiLCJuZXh0SW5kZXgiLCJuZXh0SW5kZXhXaXRoRGV2ZWxvcGVyRGF0YSIsIm1lc3NhZ2VUeXBlIiwibWVzc2FnZVNpemUiLCJyZWFkRGF0YUZyb21JbmRleCIsImZpZWxkcyIsInVuZGVmaW5lZCIsImVsYXBzZWRSZWNvcmRGaWVsZCIsImVsYXBzZWRfdGltZSIsInRpbWVzdGFtcCIsInRpbWVyX3RpbWUiLCJkZXZlbG9wZXJfZGF0YV9pbmRleCIsImZpZWxkX2RlZmluaXRpb25fbnVtYmVyIiwiZ2V0QXJyYXlCdWZmZXIiLCJBcnJheUJ1ZmZlciIsImFiIiwidmlldyIsImNhbGN1bGF0ZUNSQyIsInN0YXJ0IiwiZW5kIiwiY3JjVGFibGUiLCJjcmMiLCJieXRlIiwidG1wIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBSU8sU0FBU0EsU0FBVCxDQUFtQkMsWUFBbkIsRUFBMENDLEtBQTFDLEVBQW1FO0FBQ3hFLE1BQUlDLE1BQU0sR0FBRyxDQUFiO0FBQ0EsTUFBSSxDQUFDRixZQUFMLEVBQW1CQyxLQUFLLENBQUNFLE9BQU47O0FBQ25CLE9BQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0gsS0FBSyxDQUFDSSxNQUExQixFQUFrQ0QsQ0FBQyxFQUFuQyxFQUF1QztBQUNyQ0YsSUFBQUEsTUFBTSxJQUFLRCxLQUFLLENBQUNHLENBQUQsQ0FBTCxLQUFhQSxDQUFDLElBQUksQ0FBbEIsQ0FBRCxLQUEyQixDQUFyQztB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QSxHQUFHLEdBQUlBLEdBQUcsSUFBSSxDQUFSLEdBQWEsTUFBbkI7QUFDQUEsSUFBQUEsR0FBRyxHQUFHQSxHQUFHLEdBQUdFLEdBQU4sR0FBWUgsUUFBUSxDQUFDRSxLQUFJLEdBQUcsR0FBUixDQUExQjtBQUNBQyxJQUFBQSxHQUFHLEdBQUdILFFBQVEsQ0FBQ0MsR0FBRyxHQUFHLEdBQVAsQ0FBZDtBQUNBQSxJQUFBQSxHQUFHLEdBQUlBLEdBQUcsSUFBSSxDQUFSLEdBQWEsTUFBbkI7QUFDQUEsSUFBQUEsR0FBRyxHQUFHQSxHQUFHLEdBQUdFLEdBQU4sR0FBWUgsUUFBUSxDQUFFRSxLQUFJLElBQUksQ0FBVCxHQUFjLEdBQWYsQ0FBMUI7QUFDRDs7QUFFRCxTQUFPRCxHQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGSVRTREsgfSBmcm9tICcuL3Nkayc7XG5pbXBvcnQgeyBnZXRGaXRNZXNzYWdlLCBnZXRGaXRNZXNzYWdlQmFzZVR5cGUgfSBmcm9tICcuL21lc3NhZ2VzJztcbmltcG9ydCB7IFR5cGVEZWYsIERlZiwgTWVzc2FnZSwgRmllbGRzLCBNZXNzYWdlVHlwZXMsXG4gIERldmVsb3BlckZpZWxkcywgRml0UGFyc2VyT3B0aW9ucywgUmVhZFJlc3VsdCB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gYWRkRW5kaWFuKGxpdHRsZUVuZGlhbjogYm9vbGVhbiwgYnl0ZXM6IG51bWJlcltdKTogbnVtYmVyIHtcbiAgbGV0IHJlc3VsdCA9IDA7XG4gIGlmICghbGl0dGxlRW5kaWFuKSBieXRlcy5yZXZlcnNlKCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICByZXN1bHQgKz0gKGJ5dGVzW2ldIDw8IChpIDw8IDMpKSA+Pj4gMDtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4gIFxuZnVuY3Rpb24gcmVhZERhdGEoYmxvYjogVWludDhBcnJheSwgZkRlZjogRGVmLCBzdGFydEluZGV4OiBudW1iZXIsXG4gIG9wdGlvbnM6IEZpdFBhcnNlck9wdGlvbnMpOiBudW1iZXJ8bnVtYmVyW118c3RyaW5nIHtcbiAgaWYgKGZEZWYuZW5kaWFuQWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgIGNvbnN0IHRlbXAgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZEZWYuc2l6ZTsgaSsrKSB7XG4gICAgICB0ZW1wLnB1c2goYmxvYltzdGFydEluZGV4ICsgaV0pO1xuICAgIH1cblxuICAgIGNvbnN0IHsgYnVmZmVyIH0gPSBuZXcgVWludDhBcnJheSh0ZW1wKTtcbiAgICBjb25zdCBkYXRhVmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIpO1xuXG4gICAgdHJ5IHtcbiAgICAgIHN3aXRjaCAoZkRlZi50eXBlKSB7XG4gICAgICAgIGNhc2UgJ3NpbnQxNic6XG4gICAgICAgICAgcmV0dXJuIGRhdGFWaWV3LmdldEludDE2KDAsIGZEZWYubGl0dGxlRW5kaWFuKTtcbiAgICAgICAgY2FzZSAndWludDE2JzpcbiAgICAgICAgY2FzZSAndWludDE2eic6XG4gICAgICAgICAgcmV0dXJuIGRhdGFWaWV3LmdldFVpbnQxNigwLCBmRGVmLmxpdHRsZUVuZGlhbik7XG4gICAgICAgIGNhc2UgJ3NpbnQzMic6XG4gICAgICAgICAgcmV0dXJuIGRhdGFWaWV3LmdldEludDMyKDAsIGZEZWYubGl0dGxlRW5kaWFuKTtcbiAgICAgICAgY2FzZSAndWludDMyJzpcbiAgICAgICAgY2FzZSAndWludDMyeic6XG4gICAgICAgICAgcmV0dXJuIGRhdGFWaWV3LmdldFVpbnQzMigwLCBmRGVmLmxpdHRsZUVuZGlhbik7XG4gICAgICAgIGNhc2UgJ2Zsb2F0MzInOlxuICAgICAgICAgIHJldHVybiBkYXRhVmlldy5nZXRGbG9hdDMyKDAsIGZEZWYubGl0dGxlRW5kaWFuKTtcbiAgICAgICAgY2FzZSAnZmxvYXQ2NCc6XG4gICAgICAgICAgcmV0dXJuIGRhdGFWaWV3LmdldEZsb2F0NjQoMCwgZkRlZi5saXR0bGVFbmRpYW4pO1xuICAgICAgICBjYXNlICd1aW50MTZfYXJyYXknOiB7XG4gICAgICAgICAgY29uc3QgYXJyYXkgPSBbXTtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZEZWYuc2l6ZTsgaSArPSAyKSB7XG4gICAgICAgICAgICBhcnJheS5wdXNoKGRhdGFWaWV3LmdldFVpbnQxNihpLCBmRGVmLmxpdHRsZUVuZGlhbikpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBFcnJvcignTm8gdHlwZScpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmICghb3B0aW9ucy5mb3JjZSkge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhZGRFbmRpYW4oZkRlZi5saXR0bGVFbmRpYW4sIHRlbXApO1xuICB9XG5cbiAgaWYgKGZEZWYudHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25zdCB0ZW1wID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmRGVmLnNpemU7IGkrKykge1xuICAgICAgaWYgKGJsb2Jbc3RhcnRJbmRleCArIGldKSB7XG4gICAgICAgIHRlbXAucHVzaChibG9iW3N0YXJ0SW5kZXggKyBpXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBCdWZmZXIuZnJvbSh0ZW1wKS50b1N0cmluZygndXRmLTgnKTtcbiAgfVxuXG4gIGlmIChmRGVmLnR5cGUgPT09ICdieXRlX2FycmF5Jykge1xuICAgIGNvbnN0IHRlbXAgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZEZWYuc2l6ZTsgaSsrKSB7XG4gICAgICB0ZW1wLnB1c2goYmxvYltzdGFydEluZGV4ICsgaV0pO1xuICAgIH1cbiAgICByZXR1cm4gdGVtcDtcbiAgfVxuXG4gIHJldHVybiBibG9iW3N0YXJ0SW5kZXhdO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRCeVR5cGUoZGF0YTogYW55LCB0eXBlOiBzdHJpbmcsXG4gIHNjYWxlOiBudW1iZXIsIG9mZnNldD86IG51bWJlcik6IGFueSB7XG4gIGNvbnN0IG9mZiA9IG9mZnNldCA/wqBvZmZzZXQgOiAwO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdkYXRlX3RpbWUnOlxuICAgIGNhc2UgJ2xvY2FsX2RhdGVfdGltZSc6XG4gICAgICByZXR1cm4gbmV3IERhdGUoKGRhdGEgKiAxMDAwKSArIDYzMTA2NTYwMDAwMCk7XG4gICAgY2FzZSAnc2ludDMyJzpcbiAgICAgIHJldHVybiBkYXRhICogRklUU0RLLnNjQ29uc3Q7XG4gICAgY2FzZSAnc2ludDE2JzpcbiAgICBjYXNlICd1aW50MzInOlxuICAgIGNhc2UgJ3VpbnQxNic6XG4gICAgICByZXR1cm4gc2NhbGUgPyBkYXRhIC8gc2NhbGUgKyBvZmYgOiBkYXRhO1xuICAgIGNhc2UgJ3VpbnQxNl9hcnJheSc6XG4gICAgICBjb25zdCBkYXRhX2FycmF5ID0gZGF0YSBhcyBudW1iZXJbXVxuICAgICAgcmV0dXJuIGRhdGEubWFwKChkYXRhSXRlbTogbnVtYmVyKSA9PiB7XG4gICAgICAgIGlmIChzY2FsZSkge1xuICAgICAgICAgIHJldHVybiBkYXRhSXRlbSAvIHNjYWxlICsgb2ZmO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRhSXRlbTtcbiAgICAgIH0pO1xuICAgIGRlZmF1bHQ6IHtcbiAgICAgIGlmICghRklUU0RLLnR5cGVzLmhhc093blByb3BlcnR5KHR5cGUpKSB7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfVxuICAgICAgY29uc3QgdHlwZXMgPSBGSVRTREsudHlwZXNbdHlwZV1cbiAgICAgIC8vIFF1aWNrIGNoZWNrIGZvciBhIG1hc2tcbiAgICAgIGNvbnN0IHZhbHVlczogc3RyaW5nW10gPSBbXTtcbiAgICAgIE9iamVjdC5rZXlzKHR5cGVzKS5mb3JFYWNoKChrZXksIF8pID0+IHtcbiAgICAgICAgdmFsdWVzLnB1c2godHlwZXNba2V5XSk7XG4gICAgICB9KTtcbiAgICAgIGlmICh2YWx1ZXMuaW5kZXhPZignbWFzaycpID09PSAtMSkge1xuICAgICAgICByZXR1cm4gdHlwZXNbZGF0YV07XG4gICAgICB9XG4gICAgICBjb25zdCBkYXRhSXRlbTogeyBba2V5OiBzdHJpbmddOiBudW1iZXJ8Ym9vbGVhbiB9ID0ge307XG4gICAgICBPYmplY3Qua2V5cyh0eXBlcykuZm9yRWFjaCgoa2V5OiBzdHJpbmcsIF86IG51bWJlcikgPT4ge1xuICAgICAgICBjb25zdCBpdGVtID0gdHlwZXNba2V5XVxuICAgICAgICBpZiAoaXRlbSA9PT0gJ21hc2snKSB7XG4gICAgICAgICAgZGF0YUl0ZW1bJ3ZhbHVlJ10gPSBkYXRhICYgcGFyc2VJbnQoa2V5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkYXRhSXRlbVtpdGVtXSA9ICEhKChkYXRhICYgcGFyc2VJbnQoa2V5KSkgPj4gNyk7XG4gICAgICAgICAgLy8gTm90IHN1cmUgaWYgd2UgbmVlZCB0aGUgPj4gNyBhbmQgY2FzdGluZyB0byBib29sZWFuIGJ1dCBmcm9tIGFsbFxuICAgICAgICAgIC8vIHRoZSBtYXNrZWQgcHJvcHMgb2YgZmllbGRzIHNvIGZhciB0aGlzIHNlZW1zIHRvIGJlIHRoZSBjYXNlXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGRhdGFJdGVtO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc0ludmFsaWRWYWx1ZShkYXRhOiBhbnksIHR5cGU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdlbnVtJzpcbiAgICAgIHJldHVybiBkYXRhID09PSAweEZGO1xuICAgIGNhc2UgJ3NpbnQ4JzpcbiAgICAgIHJldHVybiBkYXRhID09PSAweDdGO1xuICAgIGNhc2UgJ3VpbnQ4JzpcbiAgICAgIHJldHVybiBkYXRhID09PSAweEZGO1xuICAgIGNhc2UgJ3NpbnQxNic6XG4gICAgICByZXR1cm4gZGF0YSA9PT0gMHg3RkZGO1xuICAgIGNhc2UgJ3VpbnQxNic6XG4gICAgICByZXR1cm4gZGF0YSA9PT0gMHhGRkZGO1xuICAgIGNhc2UgJ3NpbnQzMic6XG4gICAgICByZXR1cm4gZGF0YSA9PT0gMHg3RkZGRkZGRjtcbiAgICBjYXNlICd1aW50MzInOlxuICAgICAgcmV0dXJuIGRhdGEgPT09IDB4RkZGRkZGRkY7XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIHJldHVybiBkYXRhID09PSAweDAwO1xuICAgIGNhc2UgJ2Zsb2F0MzInOlxuICAgICAgcmV0dXJuIGRhdGEgPT09IDB4RkZGRkZGRkY7XG4gICAgY2FzZSAnZmxvYXQ2NCc6XG4gICAgICByZXR1cm4gZGF0YSA9PT0gMHhGRkZGRkZGRkZGRkZGRkZGO1xuICAgIGNhc2UgJ3VpbnQ4eic6XG4gICAgICByZXR1cm4gZGF0YSA9PT0gMHgwMDtcbiAgICBjYXNlICd1aW50MTZ6JzpcbiAgICAgIHJldHVybiBkYXRhID09PSAweDAwMDA7XG4gICAgY2FzZSAndWludDMyeic6XG4gICAgICByZXR1cm4gZGF0YSA9PT0gMHgwMDAwMDA7XG4gICAgY2FzZSAnYnl0ZSc6XG4gICAgICByZXR1cm4gZGF0YSA9PT0gMHhGRjtcbiAgICBjYXNlICdzaW50NjQnOlxuICAgICAgcmV0dXJuIGRhdGEgPT09IDB4N0ZGRkZGRkZGRkZGRkZGRjtcbiAgICBjYXNlICd1aW50NjQnOlxuICAgICAgcmV0dXJuIGRhdGEgPT09IDB4RkZGRkZGRkZGRkZGRkZGRjtcbiAgICBjYXNlICd1aW50NjR6JzpcbiAgICAgIHJldHVybiBkYXRhID09PSAweDAwMDAwMDAwMDAwMDAwMDA7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb252ZXJ0VG8oZGF0YTogYW55LCB1bml0c0xpc3Q6IHN0cmluZywgc3BlZWRVbml0OiBzdHJpbmcpOiBudW1iZXIge1xuICBjb25zdCB1bml0T2JqID0gRklUU0RLLm9wdGlvbnNbdW5pdHNMaXN0XVtzcGVlZFVuaXRdO1xuICByZXR1cm4gdW5pdE9iaiA/IGRhdGEgKiB1bml0T2JqLm11bHRpcGxpZXIgKyB1bml0T2JqLm9mZnNldCA6IGRhdGE7XG59XG5cbmZ1bmN0aW9uIGFwcGx5T3B0aW9ucyhkYXRhOiBhbnksIGZpZWxkOiBzdHJpbmcsIG9wdGlvbnM6IEZpdFBhcnNlck9wdGlvbnMpOiBhbnkge1xuICBzd2l0Y2ggKGZpZWxkKSB7XG4gICAgY2FzZSAnc3BlZWQnOlxuICAgIGNhc2UgJ2VuaGFuY2VkX3NwZWVkJzpcbiAgICBjYXNlICd2ZXJ0aWNhbF9zcGVlZCc6XG4gICAgY2FzZSAnYXZnX3NwZWVkJzpcbiAgICBjYXNlICdtYXhfc3BlZWQnOlxuICAgIGNhc2UgJ3NwZWVkXzFzJzpcbiAgICBjYXNlICdiYWxsX3NwZWVkJzpcbiAgICBjYXNlICdlbmhhbmNlZF9hdmdfc3BlZWQnOlxuICAgIGNhc2UgJ2VuaGFuY2VkX21heF9zcGVlZCc6XG4gICAgY2FzZSAnYXZnX3Bvc192ZXJ0aWNhbF9zcGVlZCc6XG4gICAgY2FzZSAnbWF4X3Bvc192ZXJ0aWNhbF9zcGVlZCc6XG4gICAgY2FzZSAnYXZnX25lZ192ZXJ0aWNhbF9zcGVlZCc6XG4gICAgY2FzZSAnbWF4X25lZ192ZXJ0aWNhbF9zcGVlZCc6XG4gICAgICAvLyAhIcKgYmVjYXVzZSBvcHRpb25zIGhhdmUgYWxyZWFkeSBiZWVuIGNoZWNrZWRcbiAgICAgIHJldHVybiBjb252ZXJ0VG8oZGF0YSwgJ3NwZWVkVW5pdHMnLCBvcHRpb25zLnNwZWVkVW5pdCEhKTtcbiAgICBjYXNlICdkaXN0YW5jZSc6XG4gICAgY2FzZSAndG90YWxfZGlzdGFuY2UnOlxuICAgIGNhc2UgJ2VuaGFuY2VkX2F2Z19hbHRpdHVkZSc6XG4gICAgY2FzZSAnZW5oYW5jZWRfbWluX2FsdGl0dWRlJzpcbiAgICBjYXNlICdlbmhhbmNlZF9tYXhfYWx0aXR1ZGUnOlxuICAgIGNhc2UgJ2VuaGFuY2VkX2FsdGl0dWRlJzpcbiAgICBjYXNlICdoZWlnaHQnOlxuICAgIGNhc2UgJ29kb21ldGVyJzpcbiAgICBjYXNlICdhdmdfc3Ryb2tlX2Rpc3RhbmNlJzpcbiAgICBjYXNlICdtaW5fYWx0aXR1ZGUnOlxuICAgIGNhc2UgJ2F2Z19hbHRpdHVkZSc6XG4gICAgY2FzZSAnbWF4X2FsdGl0dWRlJzpcbiAgICBjYXNlICd0b3RhbF9hc2NlbnQnOlxuICAgIGNhc2UgJ3RvdGFsX2Rlc2NlbnQnOlxuICAgIGNhc2UgJ2FsdGl0dWRlJzpcbiAgICBjYXNlICdjeWNsZV9sZW5ndGgnOlxuICAgIGNhc2UgJ2F1dG9fd2hlZWxzaXplJzpcbiAgICBjYXNlICdjdXN0b21fd2hlZWxzaXplJzpcbiAgICBjYXNlICdncHNfYWNjdXJhY3knOlxuICAgICAgcmV0dXJuIGNvbnZlcnRUbyhkYXRhLCAnbGVuZ3RoVW5pdHMnLCBvcHRpb25zLmxlbmd0aFVuaXQhISk7XG4gICAgY2FzZSAndGVtcGVyYXR1cmUnOlxuICAgIGNhc2UgJ2F2Z190ZW1wZXJhdHVyZSc6XG4gICAgY2FzZSAnbWF4X3RlbXBlcmF0dXJlJzpcbiAgICAgIHJldHVybiBjb252ZXJ0VG8oZGF0YSwgJ3RlbXBlcmF0dXJlVW5pdHMnLCBvcHRpb25zLnRlbXBlcmF0dXJlVW5pdCEhKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGRhdGE7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlYWRSZWNvcmQoYmxvYjogVWludDhBcnJheSwgbWVzc2FnZVR5cGVzOiBNZXNzYWdlVHlwZXMsXG4gIGRldmVsb3BlckZpZWxkczogRGV2ZWxvcGVyRmllbGRzLFxuICBzdGFydEluZGV4OiBudW1iZXIsIG9wdGlvbnM6IEZpdFBhcnNlck9wdGlvbnMsXG4gIHN0YXJ0RGF0ZTogbnVtYmVyLCBwYXVzZWRUaW1lOiBudW1iZXIpOiBSZWFkUmVzdWx0IHtcbiAgY29uc3QgcmVjb3JkSGVhZGVyID0gYmxvYltzdGFydEluZGV4XTtcbiAgY29uc3QgbG9jYWxNZXNzYWdlVHlwZSA9IHJlY29yZEhlYWRlciAmIDE1O1xuXG4gIGlmICgocmVjb3JkSGVhZGVyICYgNjQpID09PSA2NCkge1xuICAgIC8vIGlzIGRlZmluaXRpb24gbWVzc2FnZVxuICAgIC8vIHN0YXJ0SW5kZXggKyAxIGlzIHJlc2VydmVkXG5cbiAgICBjb25zdCBoYXNEZXZlbG9wZXJEYXRhID0gKHJlY29yZEhlYWRlciAmIDMyKSA9PT0gMzI7XG4gICAgY29uc3QgbEVuZCA9IGJsb2Jbc3RhcnRJbmRleCArIDJdID09PSAwO1xuICAgIGNvbnN0IG51bWJlck9mRmllbGRzID0gYmxvYltzdGFydEluZGV4ICsgNV07XG4gICAgY29uc3QgbnVtYmVyT2ZEZXZlbG9wZXJEYXRhRmllbGRzID0gaGFzRGV2ZWxvcGVyRGF0YSA/IGJsb2Jbc3RhcnRJbmRleCArIDUgKyBudW1iZXJPZkZpZWxkcyAqIDMgKyAxXSA6IDA7XG5cbiAgICBjb25zdCBtVHlwZURlZjogVHlwZURlZiA9IHtcbiAgICAgIGxpdHRsZUVuZGlhbjogbEVuZCxcbiAgICAgIGdsb2JhbE1lc3NhZ2VOdW1iZXI6IGFkZEVuZGlhbihsRW5kLCBbYmxvYltzdGFydEluZGV4ICsgM10sIGJsb2Jbc3RhcnRJbmRleCArIDRdXSksXG4gICAgICBudW1iZXJPZkZpZWxkczogbnVtYmVyT2ZGaWVsZHMgKyBudW1iZXJPZkRldmVsb3BlckRhdGFGaWVsZHMsXG4gICAgICBmaWVsZERlZnM6IFtdLFxuICAgIH07XG5cbiAgICBjb25zdCBtZXNzYWdlID0gZ2V0Rml0TWVzc2FnZShtVHlwZURlZi5nbG9iYWxNZXNzYWdlTnVtYmVyKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtYmVyT2ZGaWVsZHM7IGkrKykge1xuICAgICAgY29uc3QgZkRlZkluZGV4ID0gc3RhcnRJbmRleCArIDYgKyAoaSAqIDMpO1xuICAgICAgY29uc3QgYmFzZVR5cGUgPSBibG9iW2ZEZWZJbmRleCArIDJdO1xuICAgICAgY29uc3QgeyBmaWVsZCwgdHlwZSB9ID0gbWVzc2FnZS5nZXRBdHRyaWJ1dGVzKGJsb2JbZkRlZkluZGV4XSk7IFxuICAgICAgY29uc3QgZkRlZjogRGVmID0ge1xuICAgICAgICB0eXBlLFxuICAgICAgICBmRGVmTm86IGJsb2JbZkRlZkluZGV4XSxcbiAgICAgICAgc2l6ZTogYmxvYltmRGVmSW5kZXggKyAxXSxcbiAgICAgICAgZW5kaWFuQWJpbGl0eTogKGJhc2VUeXBlICYgMTI4KSA9PT0gMTI4LFxuICAgICAgICBsaXR0bGVFbmRpYW46IGxFbmQsXG4gICAgICAgIGJhc2VUeXBlTm86IChiYXNlVHlwZSAmIDE1KSxcbiAgICAgICAgbmFtZTogZmllbGQsXG4gICAgICAgIGRhdGFUeXBlOiBnZXRGaXRNZXNzYWdlQmFzZVR5cGUoYmFzZVR5cGUgJiAxNSksXG4gICAgICB9O1xuXG4gICAgICBtVHlwZURlZi5maWVsZERlZnMucHVzaChmRGVmKTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlck9mRGV2ZWxvcGVyRGF0YUZpZWxkczsgaSsrKSB7XG4gICAgICAvLyBJZiB3ZSBmYWlsIHRvIHBhcnNlIHRoZW4gdHJ5IGNhdGNoXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBmRGVmSW5kZXggPSBzdGFydEluZGV4ICsgNiArIChudW1iZXJPZkZpZWxkcyAqIDMpICsgMSArIChpICogMyk7XG5cbiAgICAgICAgY29uc3QgZmllbGROdW0gPSBibG9iW2ZEZWZJbmRleF07XG4gICAgICAgIGNvbnN0IHNpemUgPSBibG9iW2ZEZWZJbmRleCArIDFdO1xuICAgICAgICBjb25zdCBkZXZEYXRhSW5kZXggPSBibG9iW2ZEZWZJbmRleCArIDJdO1xuXG4gICAgICAgIGNvbnN0IGRldkRlZiA9IGRldmVsb3BlckZpZWxkc1tkZXZEYXRhSW5kZXhdW2ZpZWxkTnVtXTtcblxuICAgICAgICBjb25zdCBiYXNlVHlwZSA9IGRldkRlZi5maXRfYmFzZV90eXBlX2lkO1xuXG4gICAgICAgIGNvbnN0IGZEZWYgPSB7XG4gICAgICAgICAgdHlwZTogRklUU0RLLnR5cGVzLmZpdF9iYXNlX3R5cGVbYmFzZVR5cGVdLFxuICAgICAgICAgIHNpemUsXG4gICAgICAgICAgZkRlZk5vOiBmaWVsZE51bSxcbiAgICAgICAgICBlbmRpYW5BYmlsaXR5OiAoYmFzZVR5cGUgJiAxMjgpID09PSAxMjgsXG4gICAgICAgICAgbGl0dGxlRW5kaWFuOiBsRW5kLFxuICAgICAgICAgIGJhc2VUeXBlTm86IChiYXNlVHlwZSAmIDE1KSxcbiAgICAgICAgICBuYW1lOiBkZXZEZWYuZmllbGRfbmFtZSxcbiAgICAgICAgICBkYXRhVHlwZTogZ2V0Rml0TWVzc2FnZUJhc2VUeXBlKGJhc2VUeXBlICYgMTUpLFxuICAgICAgICAgIHNjYWxlOiBkZXZEZWYuc2NhbGUgfHwgMSxcbiAgICAgICAgICBvZmZzZXQ6IGRldkRlZi5vZmZzZXQgfHwgMCxcbiAgICAgICAgICBkZXZlbG9wZXJEYXRhSW5kZXg6IGRldkRhdGFJbmRleCxcbiAgICAgICAgICBpc0RldmVsb3BlckZpZWxkOiB0cnVlLFxuICAgICAgICB9O1xuXG4gICAgICAgIG1UeXBlRGVmLmZpZWxkRGVmcy5wdXNoKGZEZWYpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAob3B0aW9ucy5mb3JjZSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVzc2FnZVR5cGVzW2xvY2FsTWVzc2FnZVR5cGVdID0gbVR5cGVEZWY7XG5cbiAgICBjb25zdCBuZXh0SW5kZXggPSBzdGFydEluZGV4ICsgNiArIChtVHlwZURlZi5udW1iZXJPZkZpZWxkcyAqIDMpO1xuICAgIGNvbnN0IG5leHRJbmRleFdpdGhEZXZlbG9wZXJEYXRhID0gbmV4dEluZGV4ICsgMTtcblxuICAgIHJldHVybiB7XG4gICAgICBtZXNzYWdlVHlwZTogJ2RlZmluaXRpb24nLFxuICAgICAgbmV4dEluZGV4OiBoYXNEZXZlbG9wZXJEYXRhID8gbmV4dEluZGV4V2l0aERldmVsb3BlckRhdGEgOiBuZXh0SW5kZXgsXG4gICAgfTtcbiAgfVxuXG4gIGNvbnN0IG1lc3NhZ2VUeXBlID0gbWVzc2FnZVR5cGVzW2xvY2FsTWVzc2FnZVR5cGVdIHx8IG1lc3NhZ2VUeXBlc1swXTtcblxuICAvLyBUT0RPOiBoYW5kbGUgY29tcHJlc3NlZCBoZWFkZXIgKChyZWNvcmRIZWFkZXIgJiAxMjgpID09IDEyOClcblxuICAvLyB1bmNvbXByZXNzZWQgaGVhZGVyXG4gIGxldCBtZXNzYWdlU2l6ZSA9IDA7XG4gIGxldCByZWFkRGF0YUZyb21JbmRleCA9IHN0YXJ0SW5kZXggKyAxO1xuICBjb25zdCBmaWVsZHM6IEZpZWxkcyA9IHt9O1xuXG4gIGNvbnN0IG1lc3NhZ2UgPSBnZXRGaXRNZXNzYWdlKG1lc3NhZ2VUeXBlLmdsb2JhbE1lc3NhZ2VOdW1iZXIpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWVzc2FnZVR5cGUuZmllbGREZWZzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgZkRlZiA9IG1lc3NhZ2VUeXBlLmZpZWxkRGVmc1tpXTtcbiAgICBjb25zdCBkYXRhID0gcmVhZERhdGEoYmxvYiwgZkRlZiwgcmVhZERhdGFGcm9tSW5kZXgsIG9wdGlvbnMpO1xuXG4gICAgaWYgKCFpc0ludmFsaWRWYWx1ZShkYXRhLCBmRGVmLnR5cGUpKSB7XG4gICAgICBpZiAoZkRlZi5pc0RldmVsb3BlckZpZWxkICYmIGZEZWYubmFtZSkge1xuICAgICAgICBjb25zdCBmaWVsZCA9IGZEZWYubmFtZTtcbiAgICAgICAgY29uc3QgeyB0eXBlLCBzY2FsZSwgb2Zmc2V0IH0gPSBmRGVmO1xuXG4gICAgICAgIGZpZWxkc1tmRGVmLm5hbWVdID0gYXBwbHlPcHRpb25zKGZvcm1hdEJ5VHlwZShkYXRhLCB0eXBlLCBzY2FsZSwgb2Zmc2V0KSwgZmllbGQsIG9wdGlvbnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgeyBmaWVsZCwgdHlwZSwgc2NhbGUsIG9mZnNldCB9ID0gbWVzc2FnZS5nZXRBdHRyaWJ1dGVzKGZEZWYuZkRlZk5vKTtcblxuICAgICAgICBpZiAoZmllbGQgIT09ICd1bmtub3duJyAmJiBmaWVsZCAhPT0gJycgJiYgZmllbGQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGZpZWxkc1tmaWVsZF0gPSBhcHBseU9wdGlvbnMoZm9ybWF0QnlUeXBlKGRhdGEsIHR5cGUsIHNjYWxlLCBvZmZzZXQpLCBmaWVsZCwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1lc3NhZ2UubmFtZSA9PT0gJ3JlY29yZCcgJiYgb3B0aW9ucy5lbGFwc2VkUmVjb3JkRmllbGQpIHtcbiAgICAgICAgZmllbGRzLmVsYXBzZWRfdGltZSA9IChmaWVsZHMudGltZXN0YW1wIC0gc3RhcnREYXRlKSAvIDEwMDA7XG4gICAgICAgIGZpZWxkcy50aW1lcl90aW1lID0gZmllbGRzLmVsYXBzZWRfdGltZSAtIHBhdXNlZFRpbWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmVhZERhdGFGcm9tSW5kZXggKz0gZkRlZi5zaXplO1xuICAgIG1lc3NhZ2VTaXplICs9IGZEZWYuc2l6ZTtcbiAgfVxuXG4gIGlmIChtZXNzYWdlLm5hbWUgPT09ICdmaWVsZF9kZXNjcmlwdGlvbicpIHtcbiAgICBkZXZlbG9wZXJGaWVsZHNbZmllbGRzLmRldmVsb3Blcl9kYXRhX2luZGV4XSA9IGRldmVsb3BlckZpZWxkc1tmaWVsZHMuZGV2ZWxvcGVyX2RhdGFfaW5kZXhdIHx8IFtdO1xuICAgIGRldmVsb3BlckZpZWxkc1tmaWVsZHMuZGV2ZWxvcGVyX2RhdGFfaW5kZXhdW2ZpZWxkcy5maWVsZF9kZWZpbml0aW9uX251bWJlcl0gPSBmaWVsZHM7XG4gIH1cblxuICBjb25zdCByZXN1bHQgPSB7XG4gICAgbWVzc2FnZVR5cGU6IG1lc3NhZ2UubmFtZSxcbiAgICBuZXh0SW5kZXg6IHN0YXJ0SW5kZXggKyBtZXNzYWdlU2l6ZSArIDEsXG4gICAgbWVzc2FnZTogZmllbGRzLFxuICB9O1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBcnJheUJ1ZmZlcihidWZmZXI6IEFycmF5QnVmZmVyfEJ1ZmZlcikge1xuICBpZiAoYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gYnVmZmVyO1xuICB9XG4gIGNvbnN0IGFiID0gbmV3IEFycmF5QnVmZmVyKGJ1ZmZlci5sZW5ndGgpO1xuICBjb25zdCB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYWIpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1ZmZlci5sZW5ndGg7ICsraSkge1xuICAgIHZpZXdbaV0gPSBidWZmZXJbaV07XG4gIH1cbiAgcmV0dXJuIGFiO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlQ1JDKGJsb2I6IFVpbnQ4QXJyYXksIHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyKSB7XG4gIGNvbnN0IGNyY1RhYmxlID0gW1xuICAgIDB4MDAwMCwgMHhDQzAxLCAweEQ4MDEsIDB4MTQwMCwgMHhGMDAxLCAweDNDMDAsIDB4MjgwMCwgMHhFNDAxLFxuICAgIDB4QTAwMSwgMHg2QzAwLCAweDc4MDAsIDB4QjQwMSwgMHg1MDAwLCAweDlDMDEsIDB4ODgwMSwgMHg0NDAwLFxuICBdO1xuXG4gIGxldCBjcmMgPSAwO1xuICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgIGNvbnN0IGJ5dGUgPSBibG9iW2ldO1xuICAgIGxldCB0bXAgPSBjcmNUYWJsZVtjcmMgJiAweEZdO1xuICAgIGNyYyA9IChjcmMgPj4gNCkgJiAweDBGRkY7XG4gICAgY3JjID0gY3JjIF4gdG1wIF4gY3JjVGFibGVbYnl0ZSAmIDB4Rl07XG4gICAgdG1wID0gY3JjVGFibGVbY3JjICYgMHhGXTtcbiAgICBjcmMgPSAoY3JjID4+IDQpICYgMHgwRkZGO1xuICAgIGNyYyA9IGNyYyBeIHRtcCBeIGNyY1RhYmxlWyhieXRlID4+IDQpICYgMHhGXTtcbiAgfVxuXG4gIHJldHVybiBjcmM7XG59XG4iXX0=